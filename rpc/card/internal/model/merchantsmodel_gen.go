// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.4

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	merchantsFieldNames          = builder.RawFieldNames(&Merchants{})
	merchantsRows                = strings.Join(merchantsFieldNames, ",")
	merchantsRowsExpectAutoSet   = strings.Join(stringx.Remove(merchantsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	merchantsRowsWithPlaceHolder = strings.Join(stringx.Remove(merchantsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	merchantsModel interface {
		Insert(ctx context.Context, data *Merchants) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Merchants, error)
		FindOneByMerchantId(ctx context.Context, merchantId string) (*Merchants, error)
		Update(ctx context.Context, data *Merchants) error
		Delete(ctx context.Context, id int64) error
	}

	defaultMerchantsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Merchants struct {
		Id                  int64          `db:"id"`                   // ä¸»é”®ID
		MerchantId          string         `db:"merchant_id"`          // å•†æˆ·å”¯ä¸€ID
		EntityName          string         `db:"entity_name"`          // å•†æˆ·ä¸»ä½“åç§°
		BrandName           string         `db:"brand_name"`           // å•†æˆ·å“ç‰Œåç§°
		WebsiteUrl          sql.NullString `db:"website_url"`          // ç½‘å€
		MerchantLogo        sql.NullString `db:"merchant_logo"`        // å•†æˆ·logo
		MerchantCountry     string         `db:"merchant_country"`     // å›½å®¶
		ContactName         string         `db:"contact_name"`         // è”ç³»äººå§“å
		ContactEmail        string         `db:"contact_email"`        // è”ç³»äººé‚®ç®±
		ApiKey              string         `db:"api_key"`              // APIå¯†é’¥
		VerifiedStatus      string         `db:"verified_status"`      // å®¡æ ¸çŠ¶æ€
		MerchantStatus      string         `db:"merchant_status"`      // æ¿€æ´»çŠ¶æ€
		BusinessDescription sql.NullString `db:"business_description"` // å•†æˆ·ä¸šåŠ¡æè¿°
		CreatedAt           time.Time      `db:"created_at"`           // åˆ›å»ºæ—¶é—´
		UpdatedAt           time.Time      `db:"updated_at"`           // æ›´æ–°æ—¶é—´
	}
)

func newMerchantsModel(conn sqlx.SqlConn) *defaultMerchantsModel {
	return &defaultMerchantsModel{
		conn:  conn,
		table: "`merchants`",
	}
}

func (m *defaultMerchantsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultMerchantsModel) FindOne(ctx context.Context, id int64) (*Merchants, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", merchantsRows, m.table)
	var resp Merchants
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMerchantsModel) FindOneByMerchantId(ctx context.Context, merchantId string) (*Merchants, error) {
	var resp Merchants
	query := fmt.Sprintf("select %s from %s where `merchant_id` = ? limit 1", merchantsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, merchantId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMerchantsModel) Insert(ctx context.Context, data *Merchants) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, merchantsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.MerchantId, data.EntityName, data.BrandName, data.WebsiteUrl, data.MerchantLogo, data.MerchantCountry, data.ContactName, data.ContactEmail, data.ApiKey, data.VerifiedStatus, data.MerchantStatus, data.BusinessDescription)
	return ret, err
}

func (m *defaultMerchantsModel) Update(ctx context.Context, newData *Merchants) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, merchantsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.MerchantId, newData.EntityName, newData.BrandName, newData.WebsiteUrl, newData.MerchantLogo, newData.MerchantCountry, newData.ContactName, newData.ContactEmail, newData.ApiKey, newData.VerifiedStatus, newData.MerchantStatus, newData.BusinessDescription, newData.Id)
	return err
}

func (m *defaultMerchantsModel) tableName() string {
	return m.table
}
